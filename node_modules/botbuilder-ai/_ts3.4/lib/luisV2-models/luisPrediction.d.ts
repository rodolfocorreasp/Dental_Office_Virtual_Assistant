/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { ServiceCallback } from '@azure/core-http';
import { LUISRuntimeClientContext } from '../luisRuntimeClientContext';
import { LuisResult, PredictionResolveOptionalParams, PredictionResolveResponse } from './luisResult';
/** Class representing a Prediction. */
export declare class LuisPrediction {
    private readonly client;
    /**
     * Create a Prediction.
     *
     * @param {LUISRuntimeClientContext} client Reference to the service client.
     */
    constructor(client: LUISRuntimeClientContext);
    /**
     * Gets predictions for a given utterance, in the form of intents and entities. The current maximum
     * query size is 500 characters.
     *
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @param [options] The optional parameters
     * @returns Promise<Models.PredictionResolveResponse>
     */
    resolve(appId: string, query: string, options?: PredictionResolveOptionalParams): Promise<PredictionResolveResponse>;
    /**
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @param callback The callback
     */
    resolve(appId: string, query: string, callback: ServiceCallback<LuisResult>): void;
    /**
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @param options The optional parameters
     * @param callback The callback
     */
    resolve(appId: string, query: string, options: PredictionResolveOptionalParams, callback: ServiceCallback<LuisResult>): void;
}
//# sourceMappingURL=luisPrediction.d.ts.map
