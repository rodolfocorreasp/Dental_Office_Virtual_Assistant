"use strict";
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LuisPrediction = void 0;
const core_http_1 = require("@azure/core-http");
const Parameters = __importStar(require("./luisParameters"));
const Mappers = __importStar(require("./luisMappers"));
/** Class representing a Prediction. */
class LuisPrediction {
    /**
     * Create a Prediction.
     *
     * @param {LUISRuntimeClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @param options The optional parameters.
     * @param callback The callback.
     * @returns Promise<Models.PredictionResolveResponse>.
     */
    resolve(appId, query, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            query,
            options,
        }, resolveOperationSpec, callback);
    }
}
exports.LuisPrediction = LuisPrediction;
// Operation Specifications
const serializer = new core_http_1.Serializer(Mappers);
const resolveOperationSpec = {
    httpMethod: 'POST',
    path: 'apps/{appId}',
    urlParameters: [Parameters.endpoint, Parameters.appId],
    queryParameters: [
        Parameters.timezoneOffset,
        Parameters.verbose,
        Parameters.staging,
        Parameters.spellCheck,
        Parameters.bingSpellCheckSubscriptionKey,
        Parameters.log,
    ],
    requestBody: {
        parameterPath: 'query',
        mapper: {
            required: true,
            serializedName: 'query',
            constraints: {
                MaxLength: 500,
            },
            type: {
                name: 'String',
            },
        },
    },
    responses: {
        200: {
            bodyMapper: Mappers.LuisResult,
        },
        default: {
            bodyMapper: Mappers.APIError,
        },
    },
    serializer,
};
//# sourceMappingURL=luisPrediction.js.map